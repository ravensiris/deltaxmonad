#+TITLE: XMonad Config
#+AUTHOR: Raven's Iris

* Imports
#+BEGIN_SRC haskell :tangle xmonad.hs
  import           XMonad
  import           XMonad.Hooks.DynamicLog
  import           XMonad.Layout.ThreeColumns
  import           XMonad.Util.Run                ( spawnPipe
						  , hPutStrLn
						  )
  import           XMonad.Hooks.EwmhDesktops      ( ewmh )
  import           XMonad.Hooks.ManageDocks
  import           XMonad.Layout.NoBorders        ( noBorders )
  import           XMonad.Layout.Gaps
  import           XMonad.Layout.Spacing          ( smartSpacing )
  import           XMonad.Layout.Fullscreen       ( fullscreenSupport
						  , fullscreenFocus
						  )
  import           XMonad.Util.Cursor
  import qualified Data.Map                      as M
  import           XMonad.Util.EZConfig
  import           XMonad.Actions.Promote
  import           XMonad.Util.NamedScratchpad
  import qualified XMonad.StackSet               as W
#+END_SRC

* Mouse bindings
For now they are empty.

Maybe my mouse will find some use.

#+BEGIN_SRC haskell :tangle xmonad.hs
  myMouseBindings = const mempty
#+END_SRC

* Layout
** Gaps
#+BEGIN_SRC haskell :tangle xmonad.hs
  myGaps = smartSpacing gap . gaps gapSides
    where
      gap = 12
      gapSides = zip [U,D,L,R] (repeat gap)
#+END_SRC
** Rest
Removed borders, added a fulscreen and avoidStruts(for xmobar) hook.
#+BEGIN_SRC haskell :tangle xmonad.hs
  myLayout = fullscreenFocus $ myGaps $ noBorders $ avoidStruts $ ThreeColMid
    1
    (3 / 100)
    (1 / 2)
#+END_SRC

* Keybindings
#+BEGIN_SRC haskell :tangle xmonad.hs
  myKeyBindings = (`removeKeysP` blacklist) . (`additionalKeysP` whitelist)
   where
    whitelist =
      [ ("M-<Return>", spawn "alacritty")
      , ("<F2>", spawn "pickwallpaper")
      , ("<XF86AudioNext>", spawn "quodlibet --next")
      , ("<XF86AudioPrev>", spawn "quodlibet --previous")
      , ("<XF86AudioPlay>", spawn "quodlibet --play-pause")
      , ("<F3>", spawn "picom-trans -c 80")
      , ("S-<F3>", spawn "picom-trans -c 100")
      ] ++ scratchpadsKeybindings myScratchpads

    blacklist =
      [ "M-S-<Return>" -- Terminal bound to M-<Return>
      , "M-."
      , "M-,"
      ]
#+END_SRC

* Scratchpads

#+BEGIN_SRC haskell :tangle xmonad.hs
  centeredFloat w h = customFloating $ W.RationalRect ((50 - w / 2) / 100)
						      ((50 - h / 2) / 100)
						      (w / 100)
						      (h / 100)

  myScratchpads =
    [ ( NS "htop" "alacritty --title htop -e htop" (title =? "htop") terminalFloat
      , "<F1>"
      )
    , ( NS "quodlibet" "quodlibet" (className =? "Quodlibet") mediaFloat
      , "M-m"
      )
    , ( NS "terminal"
	   "alacritty --title ScratchpadAlacritty"
	   (title =? "ScratchpadAlacritty")
	   terminalFloat
      , "M-x"
      )
    ]
    where
      terminalFloat = centeredFloat 50 60
      mediaFloat = centeredFloat 70 80


  scratchpads = map fst myScratchpads
  scratchpadsKeybindings :: [(NamedScratchpad, String)] -> [(String, X ())]
  scratchpadsKeybindings nskbd = map processNS nskbd
    where processNS (ns, kb) = (kb, namedScratchpadAction scratchpads (name ns))
#+END_SRC

* Bar
** Config
#+BEGIN_SRC conf :tangle xmobar.conf
  Config { font = "xft: VictorMono Nerd Font:pixelsize=16:antialias=true:hinting=true:light,xft:Koruri:pixelsize=16:antialias=true:hinting=true"
	 , additionalFonts = []
	 , bgColor = "#2e3440"
	 , fgColor = "#FFFFFF"
	 , alpha = 255
	 , position = Static { xpos = 0 , ypos = 0, width = 1920, height = 18 }
	 , textOffset = -1
	 , iconOffset = -1
	 , lowerOnStart = True
	 , pickBroadest = False
	 , persistent = False
	 , hideOnStart = False
	 , iconRoot = "."
	 , allDesktops = True
	 , overrideRedirect = True
	 , commands = [
			Run Cpu ["-L","3","-H","50"
				 ,"-t"," <total>%"] 10
		      , Run Memory ["-t"," <usedratio>%"] 10
		      , Run Swap ["-t", "<usedratio>%"] 10
		      , Run Date " %a %b %d %Y   %H:%M:%S" "date" 10
		      , Run StdinReader]
	 , sepChar = "%"
	 , alignSep = "||"
	 , template = "<fc=#FFFFFF,#C2185B> %StdinReader% </fc><fc=#C2185B> </fc> ||\
		   \<fc=#FFFFFF,#C2185B><fc=#C2185B> </fc>  %cpu%  %memory% * %swap%  %date%  </fc>"
	 }

#+END_SRC
** Log hook
#+BEGIN_SRC haskell :tangle xmonad.hs
  myLogHook barPipe =
    dynamicLogWithPP $ namedScratchpadFilterOutWorkspacePP $ def
      { ppCurrent         = wrap "[" "]"
      , ppTitle           = shorten 136
      , ppUrgent          = id
      , ppHiddenNoWindows = const ""
      , ppSep             = wrap " " " " $ xmobarColor "#FFFFFF" "#880E4F" "<>"
      , ppWsSep           = " "
      , ppLayout          = const ""
      , ppOrder           = id
      , ppOutput          = hPutStrLn barPipe
      , ppExtras          = []
      }
  myStatusBar = "xmobar -x0 /home/raven/.xmonad/xmobar.conf"
#+END_SRC

* Main
#+BEGIN_SRC haskell :tangle xmonad.hs
  myConfig barPipe = myKeyBindings $ def
    { modMask       = mod4Mask
    , terminal      = "alacritty"
    , layoutHook    = myLayout
    , mouseBindings = myMouseBindings
    , logHook       = myLogHook barPipe
    , workspaces    = ["GEN", "WRK", "SYS"] ++ (map show [4 .. 9])
    , manageHook    = namedScratchpadManageHook scratchpads
		      <+> manageDocks
		      <+> manageHook def
    , startupHook   = setDefaultCursor xC_left_ptr
    }

  main :: IO ()
  main = do
    barPipe <- spawnPipe myStatusBar
    xmonad $ fullscreenSupport $ docks $ ewmh $ myConfig barPipe
#+END_SRC
